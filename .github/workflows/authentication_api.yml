name: AuthenticationAPITests

on:
  push:
    branches:
      - main
    paths:
      - "Library/APIs/AuthenticationApi/**"
      - ".github/workflows/authentication_api.yaml"
  pull_request:
    branches:
      - main
    paths:
      - "Library/APIs/AuthenticationApi/**"
      - ".github/workflows/authentication_api.yaml"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    env:
     GITHUB_TOKEN: ${{ secrets.ACTIONS_API_TOKEN }}
      
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: vapor_username
          POSTGRES_PASSWORD: vapor_password
          POSTGRES_DB: kounty-users-test
        options: >-
          --health-cmd "pg_isready -U vapor_username"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Swift
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4 libpython3-dev libicu-dev libssl-dev libsqlite3-dev libblocksruntime-dev
          wget https://download.swift.org/swift-5.9-release/ubuntu2004/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu20.04.tar.gz
          tar xzf swift-5.9-RELEASE-ubuntu20.04.tar.gz
          sudo mv swift-5.9-RELEASE-ubuntu20.04/usr /usr
          sudo rm -rf swift-5.9-RELEASE-ubuntu20.04*
          swift --version
          
      - name: Install LLVM
        run: |
          sudo apt-get install -y llvm clang lcov

      - name: Set up PostgreSQL environment variables
        run: |
          echo "DATABASE_HOST=postgres" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "DATABASE_NAME=kounty-users-test" >> $GITHUB_ENV
          echo "DATABASE_USERNAME=vapor_username" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=vapor_password" >> $GITHUB_ENV

      - name: Run Unit Tests
        run: swift test --enable-code-coverage --package-path ./Library/APIs --filter AuthenticationApiTests

      - name: Create Coverage Data
        run: |
          mkdir -p coverage/APIs
          
          llvm-profdata merge -sparse ./Library/APIs/.build/debug/codecov/*.profraw -o merged.profdata       
          llvm-cov export --format=lcov --instr-profile=merged.profdata ./Library/APIs/.build/debug/APIsPackageTests.xctest/Contents/x86_64-unknown-linux-gnu/APIsPackageTests > coverage/APIs/lcov.info
    
      - name: Validate Minimum Coverage
        uses: mattpolzin/swift-codecov-action@0.7.5
        with:
         MINIMUM_COVERAGE: 0
         INCLUDE_TESTS: 'true'
         
      - name: Post Test coverage
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
         lcov-file: coverage/APIs/lcov.info
